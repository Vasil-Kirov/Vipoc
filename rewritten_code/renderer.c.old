#include "renderer/renderer.h"
#include "platform/platform.h"

#define swapf(a, b) {float tmp = a; a = b; b = tmp;}
#define push_frame_verts(target, num1, num2, color)	\
		renderer_state.frame_verts[renderer_state.last_frame_index++] = (v4){target.world_position.x##num1, target.world_position.y##num2, 0.0f, 1.0f};	\
		renderer_state.frame_verts[renderer_state.last_frame_index++] = (v4){target.texture_position.x##num1, target.texture_position.y##num2, 0.0f, 0.0f};	\
		renderer_state.frame_verts[renderer_state.last_frame_index++] = color

#define push_text_verts(target, num1, num2, color)	\
		renderer_state.text_verts[renderer_state.last_text_index++] = (v3){target.world_position.x##num1, target.world_position.y##num2, 0.0f};	\
		renderer_state.text_verts[renderer_state.last_text_index++] = (v3){target.texture_position.x##num1, target.texture_position.y##num2, 0.0f};	\
		renderer_state.text_verts[renderer_state.last_text_index++] = color
#define push_frame_verts_from_v4(target, num1, num2, color)	\
		renderer_state.frame_verts[renderer_state.last_frame_index++] = (v4){target.x##num1, target.y##num2, 0.0f, 1.0f};	\
		renderer_state.frame_verts[renderer_state.last_frame_index++] = (v4){0.0f, 0.0f, 0.0f, 0.0f};	\
		renderer_state.frame_verts[renderer_state.last_frame_index++] = color
#define push_3d_frame_verts(vector, texture, color) \
		renderer_state.frame_verts[renderer_state.last_frame_index++] = (v4){vector.x, vector.y, vector.z, 0.0f};	\
		renderer_state.frame_verts[renderer_state.last_frame_index++] = (v4){texture.x, texture.y, texture.z, 0.0f};	\
		renderer_state.frame_verts[renderer_state.last_frame_index++] = color
#define push_to_world_position(vector) \
		renderer_state.world_positions[renderer_state.last_position_index++] = (v3){vector.x, vector.y, vector.z};


// temp function
void GenGLBuffs();


typedef struct view_camera
{
	vec3 position;
	vec3 target;
	vec3 direction;
	vec3 right;
	vec3 up;
	vec3 front;
} view_camera;

typedef struct gl_state
{
	GLuint shader_program;
	GLuint vao;
	GLuint vbo;
	GLuint ebo;
	GLuint texture;
	GLuint text_atlas;
	GLuint text_atlas_width;
	GLuint text_atlas_height;
	v4 *frame_verts;
	GLuint last_frame_index;
	v3 *text_verts;
	GLuint last_text_index;
	v3 *world_positions;
	GLuint last_position_index;
} gl_state;

#define VP_MAX_TEXTURES 2048

internal gl_state renderer_state;
internal frame_buffer to_render[1024];
internal view_camera camera = {{0.0f, 0.0f, 3.0f}, {0.0f, 0.0f, 0.0f}, {}};
internal delta_time delta;
internal bool32 force_2d;

global_var float yaw   = -90.0f;
global_var int last_tex_index;
global_var ascii_char ascii_char_map[256];
global_var float pitch = 0.0f; // mouse_move pitch
global_var float last_x = 0.0f; // mouse last x
global_var float last_y = 0.0f; // mouse last y

vp_texture
load_bmp_file(char *path);

void RendererInit()
{
	LoadGLExtensions();

	vp_memory frame_vert_memory = vp_arena_allocate(KB(60));
	renderer_state.frame_verts = (v4 *)frame_vert_memory.ptr;

	vp_memory text_vert_memory = vp_arena_allocate(KB(60));
	renderer_state.text_verts = (v3 *)text_vert_memory.ptr;

	vp_memory world_positions_memory = vp_arena_allocate(KB(60));
	renderer_state.world_positions = (v3 *)world_positions_memory.ptr;

	// TODO: Change this to temp memory
	vp_memory vertex_shader_source;
	vertex_shader_source = vp_arena_allocate(MB(1));

	vp_memory fragment_shader_source;
	fragment_shader_source = vp_arena_allocate(MB(1));


	// NOTE: 4096 is the max path on Linux
	char vertex_shader_location[4096];
	char fragment_shader_location[4096];

	platform_get_absolute_path(vertex_shader_location);
	platform_get_absolute_path(fragment_shader_location);

	// TODO: HARD CODE THE SHADERS INTO STRINGS WHEN RELEASING ! ! !
	vstd_strcat(vertex_shader_location, "engine\\src\\renderer\\shader.vert");
	vstd_strcat(fragment_shader_location, "engine\\src\\renderer\\shader.frag");

	entire_file vertex_code_file = {};
	vertex_code_file.contents = vertex_shader_source.ptr;
	
	entire_file fragment_code_file = {};
	fragment_code_file.contents = fragment_shader_source.ptr;

	platform_read_entire_file(vertex_shader_location, &vertex_code_file);
	platform_read_entire_file(fragment_shader_location, &fragment_code_file);

	
	const char *vertex_source = vertex_code_file.contents;
	GLuint vertex_shader;
	vertex_shader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertex_shader, 1, (const char * const *)&vertex_source, vp_nullptr);
	glCompileShader(vertex_shader);
	
	{
		int  success;
		char info_log[512];
		glGetShaderiv(vertex_shader, GL_COMPILE_STATUS, &success);
		if(!success)
		{
			glGetShaderInfoLog(vertex_shader, 512, NULL, info_log);
			VP_FATAL("Failed to compile shader at line %d: %s", __LINE__, info_log);
		}
	}

	const char *fragment_source = fragment_code_file.contents;
	GLuint fragment_shader;
	fragment_shader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragment_shader, 1, (const char * const *)&fragment_source, vp_nullptr);
	glCompileShader(fragment_shader);
	
	{
		int  success;
		char info_log[512];
		glGetShaderiv(fragment_shader, GL_COMPILE_STATUS, &success);
		if(!success)
		{
			glGetShaderInfoLog(fragment_shader, 512, NULL, info_log);
			VP_FATAL("Failed to compile shader at line %d: %s", __LINE__, info_log);
		}
	}

	renderer_state.shader_program = glCreateProgram();
	glAttachShader(renderer_state.shader_program, vertex_shader);
	glAttachShader(renderer_state.shader_program, fragment_shader);
	glLinkProgram(renderer_state.shader_program);
	glUseProgram(renderer_state.shader_program);


	{
		int  success;
		char info_log[512];
		glGetProgramiv(renderer_state.shader_program, GL_LINK_STATUS, &success);
		
		if(!success) 
		{
			glGetProgramInfoLog(renderer_state.shader_program, 512, NULL, info_log);
			VP_FATAL("Failed to create the shader program: %s", info_log);
		}
	}

	glDeleteShader(vertex_shader);
	glDeleteShader(fragment_shader);
	

	// First free call is redundant but it feels more correct, it will also work if I ever change the free ( probably won't but still )
	vp_arena_free_to_chunk(fragment_shader_source);
	vp_arena_free_to_chunk(vertex_shader_source);
	GenGLBuffs();
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	glm_vec3_sub(camera.position, camera.target, camera.direction);
	glm_normalize(camera.direction);
	
	vec3 up = {0.0f, 1.0f, 0.0f};
	glm_cross(up, camera.direction, camera.right);
	glm_normalize(camera.right);
	glm_cross(camera.direction, camera.right, camera.up);
	camera.front[0] = 0.0f;
	camera.front[1] = 0.0f;
	camera.front[2] = -1.0f;

//	glm_lookat((vec3){0.0f, 0.0f, 0.3f}, (vec3){0.0f, 0.0f, 0.0f}, (vec3){0.0f, 1.0f, 0.0f}, view);
}


void
vp_move_camera(vp_direction direction, float camera_speed)
{
	switch(direction)
	{
		vec3 tmp;
		case VP_UP:
		{
			glm_vec3_scale(camera.front, camera_speed, tmp);
			glm_vec3_add(camera.position, tmp, camera.position);
		}break;
		case VP_DOWN:
		{
			glm_vec3_scale(camera.front, camera_speed, tmp);
			glm_vec3_sub(camera.position, tmp, camera.position);
		}break;
		case VP_LEFT:
		{
			glm_vec3_cross(camera.front, camera.up, tmp);
			glm_normalize(tmp);
			glm_vec3_scale(tmp, camera_speed, tmp);
			glm_vec3_sub(camera.position, tmp, camera.position);
		}break;
		case VP_RIGHT:
		{
			glm_vec3_cross(camera.front, camera.up, tmp);
			glm_normalize(tmp);
			glm_vec3_scale(tmp, camera_speed, tmp);
			glm_vec3_add(camera.position, tmp, camera.position);
		}break;
	}
}

void
vp_load_text_atlas(char *path)
{

	vp_texture result = {};
	if (strstr(path, ".bmp") != vp_nullptr)
	{
		result = load_bmp_file(path);
	}
	glGenTextures(1, &renderer_state.text_atlas);
	glActiveTexture(GL_TEXTURE1);
	glBindTexture(GL_TEXTURE_2D, renderer_state.text_atlas);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, result.width, result.height, 0, GL_BGRA_EXT, GL_UNSIGNED_BYTE, result.pixels);
}

m2
normalize_m2(m2 target)
{
	target.x1 = meters_to_gl(target.x1, true);
	target.x2 = meters_to_gl(target.x2, true);
	target.y1 = meters_to_gl(target.y1, false);
	target.y2 = meters_to_gl(target.y2, false);
	return target;
}

v3
normalize_v3(v3 target)
{
	v3 result = {};
	result.x = meters_to_gl(target.x, true);
	result.y = meters_to_gl(target.y, true);
	result.z = meters_to_gl(target.z, true);
	return result;
}


vp_render_target
normalize_render_target(vp_render_target target)
{
	target.world_position.x1 = meters_to_gl(target.world_position.x1, true);
	target.world_position.x2 = meters_to_gl(target.world_position.x2, true);
	target.world_position.y1 = meters_to_gl(target.world_position.y1, false);
	target.world_position.y2 = meters_to_gl(target.world_position.y2, false);
	return target;
}

void
vp_draw_rectangle(m2 location, v4 color, int layer_id)
{
	location = normalize_m2(location);
	to_render[last_tex_index].color = color;
	to_render[last_tex_index].target.layer_id = layer_id;
	to_render[last_tex_index].target.texture_position = (m2){0.0f, 0.0f, 0.0f, 0.0f};
	to_render[last_tex_index++].target.world_position = location;
}

float
meters_to_gl(float num, bool32 is_horizontal)
{
	float a = -5000;
	float b = 5000;
//	[0 - 10] = [-1 - 1]
//	[0 - 10 000] = [-5000 - 5000] 
	float max = 10000.0f;
	
	return (( (b - a) * (num / max)) + a);
}


bool32
is_2d()
{
	return force_2d;
}

void
vp_camera_mouse_callback(double xpos, double ypos)
{
	local_var bool32 first_call = true;

	if(first_call)
	{
		last_x = xpos;
		last_y = ypos;
		first_call = false;
	}
	float xoffset = xpos - last_x;
    float yoffset = last_y - ypos; // reversed since y-coordinates go from bottom to top
    last_x = xpos;
    last_y = ypos;

    float sensitivity = 0.1f; // change this value to your liking
    xoffset *= sensitivity;
    yoffset *= sensitivity;

    yaw += xoffset;
    pitch += yoffset;

    // make sure that when pitch is out of bounds, screen doesn't get flipped
    if (pitch > 89.0f)
        pitch = 89.0f;
    if (pitch < -89.0f)
        pitch = -89.0f;

    camera.front[0] = cos(glm_rad(yaw)) * cos(glm_rad(pitch));
    camera.front[1] = sin(glm_rad(pitch));
    camera.front[2] = sin(glm_rad(yaw)) * cos(glm_rad(pitch));
    glm_normalize(camera.front);

}

void
vp_draw_cube(v3 position, v4 color)
{
	position = normalize_v3(position);
	v3 test_pos = {2.0f,  5.0f, -15.0f};
	push_to_world_position(test_pos);
	v3 texture_coordinates = {0.0f, 0.0f, 0.0f};
    float cube_vertices[] = {
        -0.5f, -0.5f, -0.5f,
         0.5f, -0.5f, -0.5f,
         0.5f,  0.5f, -0.5f,
         0.5f,  0.5f, -0.5f,
        -0.5f,  0.5f, -0.5f,
        -0.5f, -0.5f, -0.5f,

        -0.5f, -0.5f,  0.5f,
         0.5f, -0.5f,  0.5f,
         0.5f,  0.5f,  0.5f,
         0.5f,  0.5f,  0.5f,
        -0.5f,  0.5f,  0.5f,
        -0.5f, -0.5f,  0.5f,

        -0.5f,  0.5f,  0.5f,
        -0.5f,  0.5f, -0.5f,
        -0.5f, -0.5f, -0.5f,
        -0.5f, -0.5f, -0.5f,
        -0.5f, -0.5f,  0.5f,
        -0.5f,  0.5f,  0.5f,

         0.5f,  0.5f,  0.5f,
         0.5f,  0.5f, -0.5f,
         0.5f, -0.5f, -0.5f,
         0.5f, -0.5f, -0.5f,
         0.5f, -0.5f,  0.5f,
         0.5f,  0.5f,  0.5f,

        -0.5f, -0.5f, -0.5f,
         0.5f, -0.5f, -0.5f,
         0.5f, -0.5f,  0.5f,
         0.5f, -0.5f,  0.5f,
        -0.5f, -0.5f,  0.5f,
        -0.5f, -0.5f, -0.5f,

        -0.5f,  0.5f, -0.5f,
         0.5f,  0.5f, -0.5f,
         0.5f,  0.5f,  0.5f,
         0.5f,  0.5f,  0.5f,
        -0.5f,  0.5f,  0.5f,
        -0.5f,  0.5f, -0.5f,
    };
	for(int index = 0; index < 32; index+=3)
	{
		v3 verts = {cube_vertices[index], cube_vertices[index+1], cube_vertices[index+2]};
		push_3d_frame_verts(verts, texture_coordinates, color);
	}
}

float
vp_get_dtime()
{
	return delta.value;
}

void
vp_force_2d(bool32 on)
{
	force_2d = on;
}

float normalize_coordinate(float x, float maxx, float minx)
{
	float Result;
	Result = (2.0f * ((x - minx) / (maxx - minx))) - 1.0f;
	return Result;
}
float normalize_tex_coordinate(float x, float maxx, float minx)
{
	float Result;
	Result = ((x - minx) / (maxx - minx));
	return Result;
}

void
vp_draw_text(char *text, float x, float y, v3 color)
{
	int space_from_last_char = 0;
	int vert_from_last_char = 0;
	for(int index = 0; text[index] != '\0'; ++index)
	{
		int char_width = ascii_char_map[(int)text[index]].rect.x2 - ascii_char_map[(int)text[index]].rect.x1;
		int char_height = ascii_char_map[(int)text[index]].rect.y2 - ascii_char_map[(int)text[index]].rect.y1;
		vp_render_target target = {};
		target.world_position.x1 = x + space_from_last_char;
		target.world_position.x2 = target.world_position.x1 + char_width;
		target.world_position.y1 = y - vert_from_last_char;
		target.world_position.y2 = target.world_position.y1 + char_height;
		target.texture_position = ascii_char_map[(int)text[index]].rect;


		/* Normalize Coordinates */
		target.world_position.x1 = normalize_coordinate(target.world_position.x1, platform_get_width(), 0);
		target.world_position.x2 = normalize_coordinate(target.world_position.x2, platform_get_width(), 0);
		target.world_position.y1 = normalize_coordinate(target.world_position.y1, platform_get_height(), 0);
		target.world_position.y2 = normalize_coordinate(target.world_position.y2, platform_get_height(), 0);

		target.texture_position.x1 = normalize_tex_coordinate(target.texture_position.x1, renderer_state.text_atlas_width, 0);
		target.texture_position.x2 = normalize_tex_coordinate(target.texture_position.x2, renderer_state.text_atlas_width, 0);
		target.texture_position.y1 = normalize_tex_coordinate(target.texture_position.y1, renderer_state.text_atlas_height, 0);
		target.texture_position.y2 = normalize_tex_coordinate(target.texture_position.y2, renderer_state.text_atlas_height, 0);

		// Left Triangle

		// Bottom left
		push_text_verts(target, 1, 1, color);
		// Top Left
		push_text_verts(target, 1, 2, color);
		// Top Right
		push_text_verts(target, 2, 2, color);

		// Right triangle

		// Bottom Left
		push_text_verts(target, 1, 1, color);
		// Top Right
		push_text_verts(target, 2, 2, color);
		// Bottom Right
		push_text_verts(target, 2, 1, color);

		space_from_last_char += ascii_char_map[(int)text[index]].advance_x;
		if(text[index] == '\n')
		{
			vert_from_last_char += 30;
			space_from_last_char = 0;
		} 
	}
}

unsigned char *
to_next_line(unsigned char *at)
{
	while (*at != '\n')
		at++;
	at++;

	return at;
}


#define ToAndPast(at, str) at = strstr(at, str); at+=sizeof(str)-1

void
vp_parse_font_fnt(entire_file file)
{
	if(file.contents == vp_nullptr)
	{
		VP_ERROR("Passing invalid file to vp_parse_font_fnt!");
		return;
	}
	const char *at = (const char *)file.contents;
	ToAndPast(at, "scaleW=");
	renderer_state.text_atlas_width = atoi(at);
	ToAndPast(at, "scaleH=");
	renderer_state.text_atlas_height = atoi(at);

	while(true)
	{
		m2 result = {};
		ToAndPast(at, "char id=");
		char id = atoi(at);
		ToAndPast(at, "x=");
		result.x1 = atoi(at);
		ToAndPast(at, "y=");
		result.y1 = atoi(at);
		ToAndPast(at, "width=");
		result.x2 = result.x1 + atoi(at);
		ToAndPast(at, "height=");
		result.y2 = result.y1 + atoi(at);
		ToAndPast(at, "xadvance=");
		int advance_x = atoi(at);

		result.y1 = renderer_state.text_atlas_height - result.y1;
		result.y2 = renderer_state.text_atlas_height - result.y2;
		swapf(result.y1, result.y2);

		ascii_char_map[(int)id].rect = result;
		ascii_char_map[(int)id].advance_x = advance_x;
		
		// NOTE: Might be better to have some more concrete way to define the end of a file
		if(id == 126) break;
	}
}

// DONT CALL BEFORE LOADING THE ATLAS
void
vp_parse_font_xml(entire_file file)
{
	m2 result = {};
	unsigned char *at = (unsigned char *)file.contents;
	while(true)
	{
		/* Check if end was reached */
		if (!strcmp((const char *)at, "</Font>\n")) break;

		/* Get Offset */
		at = (unsigned char *)strstr((const char *)at, "offset=\"");
		at += sizeof("offset=\"")-1;
		int advance_x = atoi((const char *)at);
		while (*at != ' ')
			++at;
		++at;
		int offset_y = atoi((const char *)at);

		/* Get Char Size & Position */
		at = (unsigned char *)strstr((const char *)at, "rect=\"");
		at += sizeof("rect=\"")-1;
		
		result.x1 = atoi((const char *)at);
		while(*at != ' ') 
			++at;
		++at;

		result.y1 = atoi((const char *)at);
		while (*at != ' ')
			++at;
		++at;
		
		result.x2 = atoi((const char *)at);
		while (*at != ' ')
			++at;
		++at;
		
		result.y2 = atoi((const char *)at);
		at = (unsigned char *)strstr((const char *)at, "code=\"");
		at += sizeof("code=\"")-1;
		
		result.x2 += result.x1;
		result.y2 += result.y1;

		result.y1 = renderer_state.text_atlas_height - result.y1;
		result.y2 = renderer_state.text_atlas_height - result.y2;
		swapf(result.y1, result.y2);

		ascii_char_map[*at].rect = result;
		ascii_char_map[*at].advance_x = advance_x;
		ascii_char_map[*at].offset_y = offset_y;

		at = to_next_line(at);
	}
}

void
vp_load_texture(char *path, int width, int height)
{
	vp_texture result = {};
	if(strstr(path, ".bmp") != vp_nullptr)
	{
		result = load_bmp_file(path);
	}
	glGenTextures(1, &renderer_state.texture);
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, renderer_state.texture);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_BGRA_EXT, GL_UNSIGNED_BYTE, result.pixels);

}

void
vp_render_pushback(vp_render_target target)
{
	to_render[last_tex_index].color = (v4){1.0f, 1.0f, 1.0f, 1.0f};
	to_render[last_tex_index++].target = target;
}

void
FrameBufferToVerts(frame_buffer buffer)
{
	
	// Left Triangle
	// Bottom left
	push_frame_verts(buffer.target, 1, 1, buffer.color);
	// Top Left
	push_frame_verts(buffer.target, 1, 2, buffer.color);
	// Top Right
	push_frame_verts(buffer.target, 2, 2, buffer.color);

	// Right triangle
	// Bottom Left
	push_frame_verts(buffer.target, 1, 1, buffer.color);
	// Top Right
	push_frame_verts(buffer.target, 2, 2, buffer.color);
	// Bottom Right
	push_frame_verts(buffer.target, 2, 1, buffer.color);
}

void
GenGLBuffs()
{	
	glGenVertexArrays(1, &(renderer_state.vao));
	glGenBuffers(1, &(renderer_state.vbo));
}

void
SetShaderUniformMat4(char *str, mat4 mat)
{
	GLint location = glGetUniformLocation(renderer_state.shader_program, str);
	if(glGetError() != 0) 
		VP_ERROR("FAILED TO GET UNIFORM LOCATION!");
	glUniformMatrix4fv(location, 1, GL_FALSE, mat[0]);
	if(glGetError() != 0) 
		VP_ERROR("FAILED TO FILL UNIFORM WITH MATRIX!");

}

void
SortRenderEntries(frame_buffer *Buffer, int Size)
{
	for(int Index = 0; Index < Size; ++Index)
	{
		for(int Index2 = Index; Index2 < Size; ++Index2)
		{
			if(Buffer[Index].target.layer_id > Buffer[Index2].target.layer_id)
			{
				frame_buffer tmp = Buffer[Index];
				Buffer[Index] = Buffer[Index2];
				Buffer[Index2] = tmp;
			}
		}
	}
}


// JUMP HERE FOR MAIN CODE
#define SEC_SINCE_START() ((float)platform_get_ms_since_start() / 1000.0f)
bool32
render_update()
{
	glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);

	float current_frame = SEC_SINCE_START();
	delta.value = current_frame - delta.last_frame;
	delta.last_frame = current_frame;


	mat4 model;
	mat4 view;
	mat4 perspective;
	glm_mat4_identity(model);
	glm_mat4_identity(view);
	glm_mat4_identity(perspective);
	
	vec3 tmp_add;
	glm_vec3_add(camera.position, camera.front, tmp_add);
	glm_lookat(camera.position, tmp_add, camera.up, view);
	float ar = (float)platform_get_width() / (float)platform_get_height();

	glm_perspective(glm_rad(45.0f), ar, 0.1f, 100.0f, perspective);

	SetShaderUniformMat4("view", view);	
	for(int index = 0; index < renderer_state.last_position_index; ++index)
	{
		vec3 position = {};
		position[0] = renderer_state.world_positions[index].x;
		position[1] = renderer_state.world_positions[index].y;
		position[2] = renderer_state.world_positions[index].z;
		glm_translate(model, position); 

		glm_rotate(model, glm_rad(35.0f) , (vec3){1.0f, 0.0f, 1.0f});

		SetShaderUniformMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 36);
	}
	renderer_state.last_position_index = 0;

	if(!force_2d)
	{
		

		SetShaderUniformMat4("projection", perspective);
	}


	GLint uniform_location = glGetUniformLocation(renderer_state.shader_program, "texture1");
	glUniform1i(uniform_location, 0);
	/* Draw Textures */

	// TODO: Change this to a good sorting algorithm
	
	SortRenderEntries(to_render, last_tex_index);
	for(int Index = 0; Index < last_tex_index; ++Index)
	{
		FrameBufferToVerts(to_render[Index]);
	}

	glBindVertexArray(renderer_state.vao);

	glBindBuffer(GL_ARRAY_BUFFER, renderer_state.vbo);

	glBufferData(GL_ARRAY_BUFFER, renderer_state.last_frame_index * sizeof(m2), renderer_state.frame_verts, GL_STATIC_DRAW);

	glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 3 * sizeof(v4), (void *)0);
	glEnableVertexAttribArray(0);
	
	glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, 3 * sizeof(v4), (void *)(sizeof(v4)));
	glEnableVertexAttribArray(1);

	glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE, 3 * sizeof(v4), (void *)(sizeof(v4) * 2));
	glEnableVertexAttribArray(2);

	 
	glUseProgram(renderer_state.shader_program);

	glBindVertexArray(renderer_state.vao);
	if (glGetError() != 0)
	{
		VP_ERROR("GL ERROR: %d", glGetError());
	}

	
	glDrawArrays(GL_TRIANGLES, 0, renderer_state.last_frame_index * 3);
	renderer_state.last_frame_index = 0;
	last_tex_index = 0;


	/* Draw Text */ 
	if(renderer_state.last_text_index != 0)
	{
		glm_mat4_identity(model);
		glm_mat4_identity(view);
		glm_mat4_identity(perspective);

		SetShaderUniformMat4("model", model);
		SetShaderUniformMat4("view", view);
		SetShaderUniformMat4("projection", perspective);
		
		glUniform1i(uniform_location, 1);
		glBindVertexArray(renderer_state.vao);

		glBindBuffer(GL_ARRAY_BUFFER, renderer_state.vbo);

		glBufferData(GL_ARRAY_BUFFER, renderer_state.last_text_index * sizeof(v3), renderer_state.text_verts, GL_STATIC_DRAW);

		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(v3), (void *)0);
		glEnableVertexAttribArray(0);
		
		glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(v3), (void *)(sizeof(v3)));
		glEnableVertexAttribArray(1);

		glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(v3), (void *)(sizeof(v3) * 2));
		glEnableVertexAttribArray(2);

		glUseProgram(renderer_state.shader_program);

		glBindVertexArray(renderer_state.vao);
		if (glGetError() != 0)
		{
			VP_ERROR("GL ERROR: %d", glGetError());
		}
		glDrawArrays(GL_TRIANGLES, 0, renderer_state.last_text_index * 3);
		renderer_state.last_text_index = 0;
	} 

	platform_swap_buffers();
	return TRUE;
}

float
pixels_to_meters(int pixels)
{
	float pixels_per_meter = platform_get_width() / 100;
	return(pixels / pixels_per_meter);
	// 16:9 = 100 meters width; 56.25 meters height
}



vp_texture
load_bmp_file(char *path)
{

	vp_texture result = {};
	// Should be fine ?
	vp_memory file_memory = vp_allocate_temp(MB(10));
	entire_file file = {};
	file.contents = file_memory.ptr;
	platform_read_entire_file(path, &file);
	if(file.size != 0)
	{
		bitmap_header *header = (bitmap_header *)file.contents;

		//													BYTES PER PIXEL NOT BITS
		int pixels_size = header->Width * header->Height * header->BitsPerPixel ;
		vp_memory asset_memory = vp_allocate_asset(pixels_size);
		char *pixels_ptr = file.contents + header->BitmapOffset;
		memcpy(asset_memory.ptr, pixels_ptr, pixels_size);
		result.pixels = asset_memory.ptr;
		result.height = header->Height;
		result.width = header->Width;
	}
	else
	{
		VP_ERROR("Failed to read a fail");
	}
	
	vp_free_temp_memory();
	return result;	
}